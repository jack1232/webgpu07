{"version":3,"sources":["webpack://webgpu01/./src/helper.ts","webpack://webgpu01/./src/main.ts","webpack://webgpu01/./src/shader.wgsl","webpack://webgpu01/webpack/bootstrap","webpack://webgpu01/webpack/runtime/define property getters","webpack://webgpu01/webpack/runtime/hasOwnProperty shorthand","webpack://webgpu01/webpack/runtime/make namespace object","webpack://webgpu01/webpack/startup"],"names":["CreateGPUBuffer","device","data","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","createBuffer","size","byteLength","usage","mappedAtCreation","Float32Array","getMappedRange","set","unmap","InitGPU","checkgpu","CheckWebGPU","includes","console","log","canvas","document","getElementById","adapter","navigator","gpu","requestAdapter","requestDevice","context","getContext","devicePixelRatio","window","clientWidth","clientHeight","format","getPreferredFormat","configure","result","vertexData","colorData","vertexBuffer","colorBuffer","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","primitive","topology","commandEncoder","createCommandEncoder","textureView","getCurrentTexture","createView","renderPass","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadValue","loadOp","storeOp","setPipeline","setVertexBuffer","draw","end","queue","submit","finish","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","__webpack_modules__","call","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value"],"mappings":"8cAAa,EAAAA,gBAAkB,CAACC,EAAkBC,EAC9CC,EAAgCC,eAAeC,OAASD,eAAeE,YACvE,MAAMC,EAASN,EAAOO,aAAa,CAC/BC,KAAMP,EAAKQ,WACXC,MAAOR,EACPS,kBAAkB,IAItB,OAFA,IAAIC,aAAaN,EAAOO,kBAAkBC,IAAIb,GAC9CK,EAAOS,QACAT,GAGE,EAAAU,QAAU,IAAY,OAAD,6B,MAC9B,MAAMC,EAAW,EAAAC,cACjB,GAAGD,EAASE,SAAS,iDAEjB,MADAC,QAAQC,IAAIJ,GACP,gDAET,MAAMK,EAASC,SAASC,eAAe,iBACjCC,QAA6B,QAAb,EAAAC,UAAUC,WAAG,eAAEC,iBAC/B5B,QAAeyB,aAAO,EAAPA,EAASI,gBACxBC,EAAUR,EAAOS,WAAW,UAE5BC,EAAmBC,OAAOD,kBAAoB,EAC9CxB,EAAO,CACTc,EAAOY,YAAcF,EACrBV,EAAOa,aAAeH,GAEpBI,EAASN,EAAQO,mBAAmBZ,GAO1C,OALAK,EAAQQ,UAAU,CACdtC,OAAQA,EACRoC,OAAQA,EACR5B,KAAMA,IAEJ,CAAER,SAAQsB,SAAQc,SAAQN,cAqBvB,EAAAZ,YAAc,KACvB,IAAIqB,EAAS,+CAUb,OATSb,UAAUC,MACZY,EAAS,4hBAQTA,I,qdCnEX,eACA,YAEiC,OAAD,6BAC5B,MAAMZ,QAAY,EAAAX,UACZhB,EAAS2B,EAAI3B,OAEbwC,EAAa,IAAI5B,aAAa,EAChC,IAAM,GACN,IAAM,IACN,GAAM,IACN,GAAM,GACN,IAAM,GACN,GAAM,KAGL6B,EAAY,IAAI7B,aAAa,CAC9B,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,IAGJ8B,EAAe,EAAA3C,gBAAgBC,EAAQwC,GACvCG,EAAc,EAAA5C,gBAAgBC,EAAQyC,GAEtCG,EAAW5C,EAAO6C,qBAAqB,CACzCC,OAAQ,CACJC,OAAQ/C,EAAOgD,mBAAmB,CAC9BC,KAAM,YAEVC,WAAY,UACZC,QAAQ,CACJ,CACIC,YAAa,EACbC,WAAY,CAAC,CACTC,eAAgB,EAChBlB,OAAQ,YACRmB,OAAQ,KAGhB,CACIH,YAAa,GACbC,WAAY,CAAC,CACTC,eAAgB,EAChBlB,OAAQ,YACRmB,OAAQ,OAKxBC,SAAU,CACNT,OAAQ/C,EAAOgD,mBAAmB,CAC9BC,KAAM,YAEVC,WAAY,UACZO,QAAS,CACL,CACIrB,OAAQT,EAAIS,UAIxBsB,UAAU,CACNC,SAAU,mBAIZC,EAAiB5D,EAAO6D,uBACxBC,EAAcnC,EAAIG,QAAQiC,oBAAoBC,aAC9CC,EAAaL,EAAeM,gBAAgB,CAC9CC,iBAAkB,CAAC,CACfC,KAAMN,EACNO,WAAY,CAACC,EAAG,GAAKC,EAAG,KAAOC,EAAG,KAAOC,EAAG,GAC5CC,UAAW,CAAEJ,EAAG,GAAKC,EAAG,KAAOC,EAAG,KAAOC,EAAG,GAC5CE,OAAQ,QACRC,QAAS,YAGjBX,EAAWY,YAAYjC,GACvBqB,EAAWa,gBAAgB,EAAGpC,GAC9BuB,EAAWa,gBAAgB,EAAGnC,GAC9BsB,EAAWc,KAAK,GAChBd,EAAWe,MAEXhF,EAAOiF,MAAMC,OAAO,CAACtB,EAAeuB,e,4CCtFxC,wgBCCIC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAI1C,EAASqC,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAC,EAAoBJ,GAAUK,KAAK5C,EAAO0C,QAAS1C,EAAQA,EAAO0C,QAASJ,GAGpEtC,EAAO0C,QCpBfJ,EAAoBO,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIC,KAAOD,EACXR,EAAoBU,EAAEF,EAAYC,KAAST,EAAoBU,EAAEN,EAASK,IAC5EE,OAAOC,eAAeR,EAASK,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3ET,EAAoBU,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeZ,KAAKS,EAAKC,GCClFhB,EAAoBf,EAAKmB,IACH,oBAAXe,QAA0BA,OAAOC,aAC1CT,OAAOC,eAAeR,EAASe,OAAOC,YAAa,CAAEC,MAAO,WAE7DV,OAAOC,eAAeR,EAAS,aAAc,CAAEiB,OAAO,KCF7BrB,EAAoB,M","file":"main.bundle.js","sourcesContent":["export const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \r\n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\r\n    const buffer = device.createBuffer({\r\n        size: data.byteLength,\r\n        usage: usageFlag,\r\n        mappedAtCreation: true\r\n    });\r\n    new Float32Array(buffer.getMappedRange()).set(data);\r\n    buffer.unmap();\r\n    return buffer;\r\n}\r\n\r\nexport const InitGPU = async () => {\r\n    const checkgpu = CheckWebGPU();\r\n    if(checkgpu.includes('Your current browser does not support WebGPU!')){\r\n        console.log(checkgpu);\r\n        throw('Your current browser does not support WebGPU!');\r\n    }\r\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter();\r\n    const device = await adapter?.requestDevice() as GPUDevice;\r\n    const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;\r\n\r\n    const devicePixelRatio = window.devicePixelRatio || 1;\r\n    const size = [\r\n        canvas.clientWidth * devicePixelRatio,\r\n        canvas.clientHeight * devicePixelRatio,\r\n    ];\r\n    const format = context.getPreferredFormat(adapter!);\r\n\r\n    context.configure({\r\n        device: device,\r\n        format: format,\r\n        size: size\r\n    });\r\n    return{ device, canvas, format, context };\r\n};\r\n\r\n/*export const InitGPU = async () => {\r\n    const checkgpu = CheckWebGPU();\r\n    if(checkgpu.includes('Your current browser does not support WebGPU!')){\r\n        console.log(checkgpu);\r\n        throw('Your current browser does not support WebGPU!');\r\n    }\r\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter();\r\n    const device = await adapter?.requestDevice() as GPUDevice;\r\n    const context = canvas.getContext('gpupresent') as unknown as GPUCanvasContext;\r\n    const swapChainFormat = 'bgra8unorm';\r\n    const swapChain = context.configureSwapChain({\r\n        device: device,\r\n        format: swapChainFormat\r\n    });\r\n    return{device, canvas, swapChainFormat, swapChain };\r\n}*/\r\n\r\nexport const CheckWebGPU = () => {\r\n    let result = 'Great, your current browser supports WebGPU!';\r\n        if (!navigator.gpu) {\r\n           result = `Your current browser does not support WebGPU! Make sure you are on a system \r\n                     with WebGPU enabled. Currently, SPIR-WebGPU is only supported in  \r\n                     <a href=\"https://www.google.com/chrome/canary/\">Chrome canary</a>\r\n                     with the flag \"enable-unsafe-webgpu\" enabled. See the \r\n                     <a href=\"https://github.com/gpuweb/gpuweb/wiki/Implementation-Status\"> \r\n                     Implementation Status</a> page for more details.                   \r\n                    `;\r\n        } \r\n    return result;\r\n}","import { InitGPU, CreateGPUBuffer } from './helper';\r\nimport shader from './shader.wgsl'; \r\n\r\nconst CreateSquare = async () => {\r\n    const gpu = await InitGPU();\r\n    const device = gpu.device;\r\n\r\n    const vertexData = new Float32Array([\r\n       -0.5, -0.5,  // vertex a\r\n        0.5, -0.5,  // vertex b\r\n       -0.5,  0.5,  // vertex d\r\n       -0.5,  0.5,  // vertex d\r\n        0.5, -0.5,  // vertex b\r\n        0.5,  0.5,  // vertex c\r\n   ]);\r\n\r\n   const colorData = new Float32Array([\r\n        1, 0, 0,    // vertex a: red\r\n        0, 1, 0,    // vertex b: green\r\n        1, 1, 0,    // vertex d: yellow\r\n        1, 1, 0,    // vertex d: yellow\r\n        0, 1, 0,    // vertex b: green\r\n        0, 0, 1     // vertex c: blue\r\n    ]);\r\n\r\n    const vertexBuffer = CreateGPUBuffer(device, vertexData);\r\n    const colorBuffer = CreateGPUBuffer(device, colorData);\r\n    \r\n    const pipeline = device.createRenderPipeline({\r\n        vertex: {\r\n            module: device.createShaderModule({                    \r\n                code: shader\r\n            }),\r\n            entryPoint: \"vs_main\",\r\n            buffers:[\r\n                {\r\n                    arrayStride: 8,\r\n                    attributes: [{\r\n                        shaderLocation: 0,\r\n                        format: \"float32x2\",\r\n                        offset: 0\r\n                    }]\r\n                },\r\n                {\r\n                    arrayStride: 12,\r\n                    attributes: [{\r\n                        shaderLocation: 1,\r\n                        format: \"float32x3\",\r\n                        offset: 0\r\n                    }]\r\n                }\r\n            ]\r\n        },\r\n        fragment: {\r\n            module: device.createShaderModule({                    \r\n                code: shader\r\n            }),\r\n            entryPoint: \"fs_main\",\r\n            targets: [\r\n                {\r\n                    format: gpu.format as GPUTextureFormat\r\n                }\r\n            ]\r\n        },\r\n        primitive:{\r\n            topology: \"triangle-list\",\r\n        }\r\n    });\r\n\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = gpu.context.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({\r\n        colorAttachments: [{\r\n            view: textureView,\r\n            clearValue: {r: 0.2, g: 0.247, b: 0.314, a: 1.0}, //background color\r\n            loadValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 }, \r\n            loadOp: 'clear',\r\n            storeOp: 'store'\r\n        }]\r\n    });\r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.setVertexBuffer(0, vertexBuffer);\r\n    renderPass.setVertexBuffer(1, colorBuffer);\r\n    renderPass.draw(6);\r\n    renderPass.end();\r\n\r\n    device.queue.submit([commandEncoder.finish()]);\r\n}\r\n\r\nCreateSquare();\r\n\r\n\r\n\r\n\r\n","export default \"// vertext shader\\r\\n\\r\\nstruct Output {\\r\\n    @builtin(position) Position : vec4<f32>;\\r\\n    @location(0) vColor : vec4<f32>;\\r\\n};\\r\\n\\r\\n@stage(vertex)\\r\\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\\r\\n    var output: Output;\\r\\n    output.Position = pos;\\r\\n    output.vColor = color;\\r\\n    return output;\\r\\n}\\r\\n\\r\\n// fragment shader\\r\\n\\r\\n@stage(fragment)\\r\\nfn fs_main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\\r\\n    return vColor;\\r\\n}\"","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"sourceRoot":""}